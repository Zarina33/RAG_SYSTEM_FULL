#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –±–∞–Ω–∫–∞ –ë–∞–∫–∞–π
"""

import time
from typing import Dict, Any
from assistant import BakaiAssistant
from config import BANK_CONFIG

class BakaiCLI:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–º–æ—â–Ω–∏–∫–∞"""
    
    def __init__(self):
        self.assistant = BakaiAssistant()
        self.running = True
        self.show_sources = False
    
    def show_welcome(self) -> None:
        """–ü–æ–∫–∞–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        print("\n" + "=" * 80)
        print("üè¶ –ì–û–õ–û–°–û–í–û–ô –ü–û–ú–û–©–ù–ò–ö –ë–ê–ù–ö–ê –ë–ê–ö–ê–ô")
        print("–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º")
        print("=" * 80)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        status = self.assistant.get_system_status()
        
        print("üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:")
        print(f"   üîä TTS: {'‚úÖ –≥–æ—Ç–æ–≤' if status['tts_available'] else '‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        print(f"   üß† LLM: {'‚úÖ –≥–æ—Ç–æ–≤' if status['llm_ready'] else '‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        print(f"   üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {'‚úÖ –≥–æ—Ç–æ–≤–∞' if status['database_ready'] else '‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}")
        
        if status['database_stats']['total_documents'] > 0:
            print(f"   üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {status['database_stats']['total_documents']}")
        
        if status['tts_available']:
            voices = status['available_voices']
            print(f"   üó£Ô∏è –ì–æ–ª–æ—Å–∞: {', '.join(voices)}")
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –±–∞–Ω–∫–∞ –ë–∞–∫–∞–π. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
            print(f"\nüîä {welcome_text}")
            if status['tts_enabled']:
                self.assistant.tts.speak(welcome_text, voice="baya")
        
        self.show_commands()
    
    def show_commands(self) -> None:
        """–ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        print("\nüìã –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:")
        print("   üí¨ –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —É—Å–ª—É–≥–∞—Ö")
        print("   üß™ '—Ç–µ—Å—Ç' - –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
        print("   üó£Ô∏è '–≥–æ–ª–æ—Å–∞' - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤")
        print("   üîá '—Ç–∏—Ö–æ' - –æ—Ç–∫–ª—é—á–∏—Ç—å –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ")
        print("   üîä '–≥—Ä–æ–º–∫–æ' - –≤–∫–ª—é—á–∏—Ç—å –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ")
        print("   üìä '—Å—Ç–∞—Ç—É—Å' - –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        print("   üîß '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏' - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
        print("   üìà '–∞–Ω–∞–ª–∏–∑ <–∑–∞–ø—Ä–æ—Å>' - –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞")
        print("   üìã '—É—Å–ª—É–≥–∏' - —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —É—Å–ª—É–≥")
        print("   üìÑ '–∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤–∫–ª/–≤—ã–∫–ª' - –ø–æ–∫–∞–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        print("   ‚ùì '–ø–æ–º–æ—â—å' - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã")
        print("   üö™ '–≤—ã—Ö–æ–¥' - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")
        print("=" * 80)
    
    def process_command(self, command: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        cmd = command.lower().strip()
        
        if cmd in ('–≤—ã—Ö–æ–¥', 'exit', 'quit', 'q'):
            self.shutdown()
            return False
        
        elif cmd in ('—Ç–µ—Å—Ç', 'test'):
            self.run_system_tests()
        
        elif cmd in ('–≥–æ–ª–æ—Å–∞', 'voices'):
            self.demo_voices()
        
        elif cmd in ('—Ç–∏—Ö–æ', 'mute', 'silence'):
            self.assistant.set_tts_enabled(False)
        
        elif cmd in ('–≥—Ä–æ–º–∫–æ', 'unmute', 'sound'):
            self.assistant.set_tts_enabled(True)
        
        elif cmd in ('—Å—Ç–∞—Ç—É—Å', 'status'):
            self.show_detailed_status()
        
        elif cmd in ('–Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings'):
            self.show_settings()
        
        elif cmd.startswith('–∞–Ω–∞–ª–∏–∑ '):
            query = cmd[7:].strip()
            if query:
                self.analyze_query(query)
            else:
                print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: –∞–Ω–∞–ª–∏–∑ <–≤–∞—à –∑–∞–ø—Ä–æ—Å>")
        
        elif cmd in ('—É—Å–ª—É–≥–∏', 'services'):
            self.show_services()
        
        elif cmd in ('–∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤–∫–ª', 'sources on'):
            self.show_sources = True
            print("üìÑ –ü–æ–∫–∞–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤–∫–ª—é—á–µ–Ω")
        
        elif cmd in ('–∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤—ã–∫–ª', 'sources off'):
            self.show_sources = False
            print("üìÑ –ü–æ–∫–∞–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω")
        
        elif cmd in ('–ø–æ–º–æ—â—å', 'help', '?'):
            self.show_commands()
        
        elif cmd in ('—Å–±—Ä–æ—Å', 'reset'):
            self.assistant.reset_session_stats()
        
        else:
            return False  # –ù–µ –∫–æ–º–∞–Ω–¥–∞, –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –∑–∞–ø—Ä–æ—Å
        
        return True
    
    def run_system_tests(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("\nüß™ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–ù–´–• –¢–ï–°–¢–û–í")
        print("=" * 50)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        validation = self.assistant.validate_system()
        
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò:")
        
        # TTS —Ç–µ—Å—Ç
        tts_status = "‚úÖ" if validation["tts_system"]["test_passed"] else "‚ùå"
        print(f"   {tts_status} TTS —Å–∏—Å—Ç–µ–º–∞: {validation['tts_system']['voices_available']} –≥–æ–ª–æ—Å–æ–≤")
        
        # RAG —Ç–µ—Å—Ç
        rag_status = "‚úÖ" if validation["rag_system"]["database_ready"] else "‚ùå"
        print(f"   {rag_status} RAG —Å–∏—Å—Ç–µ–º–∞: {validation['rag_system']['documents_count']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–µ—Å—Ç
        content_ready = validation["content_system"]["service_types_count"] > 0
        content_status = "‚úÖ" if content_ready else "‚ùå"
        print(f"   {content_status} –ö–æ–Ω—Ç–µ–Ω—Ç —Å–∏—Å—Ç–µ–º–∞: {validation['content_system']['service_types_count']} —Ç–∏–ø–æ–≤ —É—Å–ª—É–≥")
        
        # –°—Å—ã–ª–∫–∏ —Ç–µ—Å—Ç
        links_valid = all(validation["link_system"]["links_valid"].values())
        links_status = "‚úÖ" if links_valid else "‚ùå"
        print(f"   {links_status} –°–∏—Å—Ç–µ–º–∞ —Å—Å—ã–ª–æ–∫: {validation['link_system']['categories_count']} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        overall_status = "‚úÖ" if validation["overall_ready"] else "‚ùå"
        print(f"\n{overall_status} –û–ë–©–ê–Ø –ì–û–¢–û–í–ù–û–°–¢–¨: {'–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞' if validation['overall_ready'] else '–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞'}")
        
        if validation["critical_issues"] > 0:
            print(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: {validation['critical_issues']}")
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        print(f"\nüîÑ –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ü–†–û–°–ê...")
        test_query = "–ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É?"
        
        try:
            result = self.assistant.process_query(test_query)
            if result["processing_success"]:
                print("‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–π–¥–µ–Ω")
                print(f"   üìÑ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {result['documents_found']}")
                print(f"   üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —É—Å–ª—É–≥–∞: {result['service_type'] or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}")
            else:
                print("‚ùå –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ: {e}")
    
    def demo_voices(self) -> None:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤"""
        if not self.assistant.tts.is_initialized:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        voice_info = self.assistant.tts.get_voice_info()
        
        print("üó£Ô∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ì–û–õ–û–°–û–í")
        print("=" * 30)
        
        for voice, info in voice_info.items():
            print(f"\nüîä –ì–æ–ª–æ—Å: {voice} ({info.get('gender', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')})")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {info.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}")
            
            demo_text = f"–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç {voice}. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞–Ω–∫ –ë–∞–∫–∞–π!"
            self.assistant.tts.speak(demo_text, voice=voice)
            time.sleep(2)
    
    def show_detailed_status(self) -> None:
        """–ü–æ–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        status = self.assistant.get_system_status()
        
        print("\nüìä –ü–û–î–†–û–ë–ù–´–ô –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´")
        print("=" * 50)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üè¶ –ë–∞–Ω–∫: {status['bank_info']['name']}")
        print(f"üåê –°–∞–π—Ç: {status['bank_info']['website']}")
        print(f"üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {status['bank_info']['support_phone']}")
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        print(f"\nüîß –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
        print(f"   üîä TTS: {'–≤–∫–ª—é—á–µ–Ω' if status['tts_enabled'] else '–æ—Ç–∫–ª—é—á–µ–Ω'} ({'–¥–æ—Å—Ç—É–ø–µ–Ω' if status['tts_available'] else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'})")
        print(f"   üß† LLM: {'–≥–æ—Ç–æ–≤' if status['llm_ready'] else '–Ω–µ –≥–æ—Ç–æ–≤'}")
        print(f"   üìö –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'–≥–æ—Ç–æ–≤–∞' if status['database_ready'] else '–Ω–µ –≥–æ—Ç–æ–≤–∞'}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_stats = status['database_stats']
        if 'total_documents' in db_stats:
            print(f"\nüìÑ –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô:")
            print(f"   –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {db_stats['total_documents']}")
            if 'document_types' in db_stats:
                for doc_type, count in db_stats['document_types'].items():
                    print(f"   - {doc_type}: {count}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏
        session = status['session_stats']
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–°–°–ò–ò:")
        print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {session['queries_processed']}")
        print(f"   –û—à–∏–±–æ–∫: {session['errors_count']}")
        
        if session['services_detected']:
            print("   –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:")
            for service, count in session['services_detected'].items():
                print(f"   - {service}: {count}")
    
    def show_settings(self) -> None:
        """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã"""
        status = self.assistant.get_system_status()
        
        print("\nüîß –ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´")
        print("=" * 30)
        
        # TTS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if status['tts_available']:
            print("üîä –û–ó–í–£–ß–ò–í–ê–ù–ò–ï:")
            print(f"   –°—Ç–∞—Ç—É—Å: {'–≤–∫–ª—é—á–µ–Ω–æ' if status['tts_enabled'] else '–æ—Ç–∫–ª—é—á–µ–Ω–æ'}")
            print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞: {', '.join(status['available_voices'])}")
            print("   –ê–≤—Ç–æ–≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞: –≤–∫–ª—é—á–µ–Ω")
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print(f"\nüìù –ö–û–ù–¢–ï–ù–¢:")
        print(f"   –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: {'–≤–∫–ª—é—á–µ–Ω–∞' if status['content_filters_enabled'] else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}")
        print(f"   –í–µ–∂–ª–∏–≤–æ—Å—Ç—å: {'–≤–∫–ª—é—á–µ–Ω–∞' if status['politeness_enabled'] else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}")
        print(f"   –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É—Å–ª—É–≥: {'–≤–∫–ª—é—á–µ–Ω—ã' if status['service_offers_enabled'] else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}")
        print(f"   –ü–æ–∫–∞–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {'–≤–∫–ª—é—á–µ–Ω' if self.show_sources else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print(f"\n‚öôÔ∏è –°–ò–°–¢–ï–ú–ê:")
        print(f"   –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'–≤–∫–ª—é—á–µ–Ω' if status['debug_mode'] else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
        print(f"   –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ: –≤–∫–ª—é—á–µ–Ω–æ")
    
    def show_services(self) -> None:
        """–ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —É—Å–ª—É–≥"""
        services = self.assistant.get_service_categories()
        
        print("\nüè¶ –ë–ê–ù–ö–û–í–°–ö–ò–ï –£–°–õ–£–ì–ò")
        print("=" * 40)
        
        for category, info in services.items():
            service_info = info['info']
            print(f"\nüìã {service_info['name'].upper()}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {service_info['description']}")
            print(f"   –°—Å—ã–ª–∫–∞: {info['link']}")
            print(f"   –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {service_info['keywords_count']}")
            print(f"   –í–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {info['offers_available']}")
    
    def analyze_query(self, query: str) -> None:
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –ó–ê–ü–†–û–°–ê: '{query}'")
        print("=" * 50)
        
        analysis = self.assistant.analyze_query(query)
        
        print(f"üìè –î–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞: {analysis['query_length']} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —É—Å–ª—É–≥–∞: {analysis['detected_service'] or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}")
        print(f"üó£Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≥–æ–ª–æ—Å: {analysis['suggested_voice'] or '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å—Å—ã–ª–æ–∫
        link_categories = analysis['link_categories']
        if link_categories:
            print(f"\nüîó –ê–ù–ê–õ–ò–ó –ö–ê–¢–ï–ì–û–†–ò–ô –°–°–´–õ–û–ö:")
            for category, data in sorted(link_categories.items(), 
                                       key=lambda x: x[1]['score'], reverse=True):
                print(f"   {category}: {data['score']:.1f} –±–∞–ª–ª–æ–≤")
                print(f"      –°–æ–≤–ø–∞–¥–µ–Ω–∏—è: {', '.join(data['matched_patterns'][:3])}")
        
        # –ü—Ä–µ–≤—å—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if analysis['documents_preview']:
            print(f"\nüìÑ –ù–ê–ô–î–ï–ù–ù–´–ï –î–û–ö–£–ú–ï–ù–¢–´:")
            for i, doc in enumerate(analysis['documents_preview'], 1):
                print(f"   {i}. {doc['content_preview']}")
                if doc['metadata']:
                    print(f"      –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {doc['metadata']}")
    
    def shutdown(self) -> None:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
        stats = self.assistant.session_stats
        if stats['queries_processed'] > 0:
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–°–°–ò–ò:")
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['queries_processed']}")
            print(f"   –û—à–∏–±–æ–∫: {stats['errors_count']}")
            if stats['services_detected']:
                print("   –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏:")
                for service, count in sorted(stats['services_detected'].items(), 
                                          key=lambda x: x[1], reverse=True):
                    print(f"   - {service}: {count}")
        
        goodbye_msg = "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –±–∞–Ω–∫–∞ –ë–∞–∫–∞–π!"
        print(f"\nüëã {goodbye_msg}")
        
        if self.assistant.tts_enabled and self.assistant.tts.is_initialized:
            self.assistant.tts.speak(goodbye_msg, voice="baya")
            time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        
        self.running = False
    
    def run(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        self.show_welcome()
        
        while self.running:
            try:
                user_input = input("\nüí¨ –í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
                
                if not user_input:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π
                if self.process_command(user_input):
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
                result = self.assistant.process_query(user_input)
                
                print(f"\n‚úÖ –û–¢–í–ï–¢:")
                print(result['answer'])
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω—ã–º
                if result['processing_success']:
                    if result['service_type']:
                        print(f"\nüéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —É—Å–ª—É–≥–∞: {result['service_type']}")
                    
                    if result['voice_used']:
                        print(f"üó£Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≥–æ–ª–æ—Å: {result['voice_used']}")
                    
                    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                    if result['documents'] and (self.show_sources or len(result['documents']) <= 3):
                        show_docs = input("\n‚ùì –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏? (y/n): ").lower()
                        if show_docs in ('y', 'yes', '–¥–∞', '–¥'):
                            self.show_document_sources(result['documents'])
                
            except KeyboardInterrupt:
                print("\n\n‚è∏Ô∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                self.shutdown()
                break
            except Exception as e:
                print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                print("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    
    def show_document_sources(self, documents) -> None:
        """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        print("\nüìÑ –ò–°–¢–û–ß–ù–ò–ö–ò:")
        print("-" * 50)
        
        for i, doc in enumerate(documents, 1):
            print(f"\n{i}. –î–û–ö–£–ú–ï–ù–¢:")
            print(f"   –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {doc.page_content[:200]}...")
            
            if hasattr(doc, 'metadata') and doc.metadata:
                print(f"   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:")
                for key, value in doc.metadata.items():
                    print(f"   - {key}: {value}")
            
            if i < len(documents):
                print("-" * 30)

# =============================================================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
# =============================================================================

def run_quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("üß™ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´")
    print("=" * 30)
    
    try:
        assistant = BakaiAssistant()
        
        # –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Å–ª—É–≥
        test_queries = [
            "–ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É?",
            "–ù—É–∂–µ–Ω –∫—Ä–µ–¥–∏—Ç –Ω–∞ –º–∞—à–∏–Ω—É",
            "–ì–¥–µ –≤–∞—à –æ—Ñ–∏—Å?"
        ]
        
        for query in test_queries:
            print(f"\nüîç –¢–µ—Å—Ç: '{query}'")
            analysis = assistant.analyze_query(query)
            print(f"   –£—Å–ª—É–≥–∞: {analysis['detected_service'] or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}")
            print(f"   –ì–æ–ª–æ—Å: {analysis['suggested_voice'] or '–Ω–µ –≤—ã–±—Ä–∞–Ω'}")
        
        print("\n‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

def show_system_info():
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
    print("üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï")
    print("=" * 40)
    
    try:
        assistant = BakaiAssistant()
        help_info = assistant.get_help_info()
        
        print(f"üè¶ –ë–∞–Ω–∫: {help_info['bank_info']['name']}")
        print(f"üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {help_info['contact_info']['phone']}")
        print(f"üåê –°–∞–π—Ç: {help_info['contact_info']['website']}")
        
        print(f"\nüîß –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —É—Å–ª—É–≥–∏:")
        for service in help_info['available_services']:
            print(f"   ‚Ä¢ {service}")
        
        print(f"\nüíª –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        for command in help_info['voice_commands']:
            print(f"   ‚Ä¢ {command}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        mode = sys.argv[1].lower()
        
        if mode == "test":
            run_quick_test()
        elif mode == "info":
            show_system_info()
        elif mode == "help":
            print("üìñ –†–ï–ñ–ò–ú–´ –ó–ê–ü–£–°–ö–ê:")
            print("python cli.py       - –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º")
            print("python cli.py test  - –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç")
            print("python cli.py info  - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
            print("python cli.py help  - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞")
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {mode}")
            print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
    else:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º
        try:
            cli = BakaiCLI()
            cli.run()
        except KeyboardInterrupt:
            print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")