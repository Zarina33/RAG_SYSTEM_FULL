#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –¥–ª—è –±–∞–Ω–∫–∞ –ë–∞–∫–∞–π –Ω–∞ –æ—Å–Ω–æ–≤–µ Silero TTS
"""

import os
import re
import ssl
import time
import subprocess
from typing import Optional, List
import torch
import torchaudio
from config import TTS_CONFIG, CONTENT_CONFIG

class BakaiTTS:
    """–°–∏—Å—Ç–µ–º–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –¥–ª—è –±–∞–Ω–∫–∞ –ë–∞–∫–∞–π –Ω–∞ –æ—Å–Ω–æ–≤–µ Silero TTS"""
    
    def __init__(self, cache_dir: str = None):
        self.cache_dir = cache_dir or TTS_CONFIG["cache_dir"]
        self.model = None
        self.sample_rate = TTS_CONFIG["sample_rate"]
        self.language = TTS_CONFIG["language"]
        self.model_name = TTS_CONFIG["model_name"]
        self.is_initialized = False
        self._init_model()
    
    def _init_model(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ TTS"""
        try:
            print("üîä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è Silero TTS...")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
            ssl._create_default_https_context = ssl._create_unverified_context
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫—ç—à–∞
            os.makedirs(self.cache_dir, exist_ok=True)
            torch.hub.set_dir(self.cache_dir)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—É—Å—Å–∫—É—é –º–æ–¥–µ–ª—å Silero
            self.model, _ = torch.hub.load(
                repo_or_dir='snakers4/silero-models',
                model='silero_tts',
                language=self.language,
                speaker=self.model_name,
                force_reload=False,
                trust_repo=True
            )
            
            self.is_initialized = True
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤–∞!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TTS: {e}")
            print("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è")
            self.model = None
            self.is_initialized = False
    
    def speak(self, text: str, voice: str = None, save_file: bool = True, play_audio: bool = True) -> Optional[str]:
        """
        –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
            voice: –ì–æ–ª–æ—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
            save_file: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª
            play_audio: –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –ª–∏ –∞—É–¥–∏–æ
        
        Returns:
            –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É –∏–ª–∏ None
        """
        if not self.is_initialized or not self.model:
            print("‚ö†Ô∏è TTS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
        
        try:
            # –û—á–∏—â–∞–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
            clean_text = self._prepare_text_for_speech(text)
            if not clean_text.strip():
                return None
            
            # –í—ã–±–∏—Ä–∞–µ–º –≥–æ–ª–æ—Å
            if not voice:
                voice = TTS_CONFIG["default_voice"]
            
            print(f"üîä –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–º '{voice}': {clean_text[:50]}...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            audio_tensor = self.model.apply_tts(
                text=clean_text,
                speaker=voice,
                sample_rate=self.sample_rate
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            filename = None
            if save_file:
                timestamp = int(time.time())
                filename = f"/Users/zarinamacbook/rag_system/bakai-assistant/voices/bakai_speech_{timestamp}_{voice}.wav"
                torchaudio.save(filename, audio_tensor.unsqueeze(0), self.sample_rate)
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
            if play_audio and filename:
                self._play_audio_file(filename)
            
            return filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: {e}")
            return None
    
    def _prepare_text_for_speech(self, text: str) -> str:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è"""
        # –£–±–∏—Ä–∞–µ–º URL –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–∫–∏
        text = re.sub(r'https?://[^\s]+', '', text)
        text = re.sub(r'–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\s*', '', text)
        text = re.sub(r'üí°\s*', '', text)  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
        
        # –ó–∞–º–µ–Ω—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
        replacements = {
            '—Ä—É–±.': '—Ä—É–±–ª–µ–π', '—Å–æ–º.': '—Å–æ–º', '—Ç—ã—Å.': '—Ç—ã—Å—è—á', '–º–ª–Ω.': '–º–∏–ª–ª–∏–æ–Ω–æ–≤',
            '–≥.': '–≥–æ–¥–∞', '—É–ª.': '—É–ª–∏—Ü–∞', '–ø—Ä.': '–ø—Ä–æ—Å–ø–µ–∫—Ç', '–¥.': '–¥–æ–º',
            '—Ç–µ–ª.': '—Ç–µ–ª–µ—Ñ–æ–Ω', 'email': '—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞', 'SMS': '–°–ú–°',
            'ATM': '–±–∞–Ω–∫–æ–º–∞—Ç', 'NFC': '–ù–§–°', 'PIN': '–ø–∏–Ω-–∫–æ–¥', 'CVV': '–∫–æ–¥ CVV',
            '—Ä/—Å': '—Ä–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç', '–ò–ü': '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å',
            '–∫–≤.': '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '—Ñ–∞–∫—Å.': '—Ñ–∞–∫—Å'
        }
        
        for abbr, full in replacements.items():
            text = text.replace(abbr, full)
        
        # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        text = re.sub(r'\s+', ' ', text).strip()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        max_length = CONTENT_CONFIG["max_text_length"]
        if len(text) > max_length:
            sentences = text.split('.')
            result = ""
            for sentence in sentences:
                if len(result + sentence) < max_length - 50:
                    result += sentence + ". "
                else:
                    break
            text = result.strip()
        
        return text
    
    def _play_audio_file(self, filename: str) -> None:
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö"""
        try:
            # macOS
            if os.system("which afplay > /dev/null 2>&1") == 0:
                subprocess.Popen(['afplay', filename], 
                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            # Linux
            elif os.system("which aplay > /dev/null 2>&1") == 0:
                subprocess.Popen(['aplay', filename], 
                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            # Windows
            elif os.name == 'nt':
                os.system(f'start /min "" "{filename}"')
            else:
                print(f"üîä –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
            print(f"üîä –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
    
    def get_available_voices(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤"""
        if self.is_initialized and self.model:
            return list(self.model.speakers)
        return ['aidar', 'baya', 'kseniya', 'xenia']  # –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫
    
    def test_voice(self, voice: str, test_text: str = None) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞"""
        if not test_text:
            test_text = f"–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç {voice}. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞–Ω–∫ –ë–∞–∫–∞–π!"
        
        result = self.speak(test_text, voice=voice)
        return result is not None
    
    def get_voice_info(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–ª–æ—Å–∞—Ö"""
        voice_descriptions = {
            'aidar': {
                'gender': '–º—É–∂—Å–∫–æ–π',
                'description': '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∞–¥—Ä–µ—Å–∞',
                'use_case': 'location_queries'
            },
            'baya': {
                'gender': '–∂–µ–Ω—Å–∫–∏–π',
                'description': '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π, –ø—Ä–∏—è—Ç–Ω—ã–π —Ç–µ–º–±—Ä',
                'use_case': 'general_queries'
            },
            'kseniya': {
                'gender': '–∂–µ–Ω—Å–∫–∏–π', 
                'description': '–ú—è–≥–∫–∏–π, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π',
                'use_case': 'instructions'
            },
            'xenia': {
                'gender': '–∂–µ–Ω—Å–∫–∏–π',
                'description': '–ß–µ—Ç–∫–∏–π, –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                'use_case': 'important_info'
            }
        }
        
        available_voices = self.get_available_voices()
        return {voice: voice_descriptions.get(voice, {'description': '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}) 
                for voice in available_voices}
    
    def select_voice_for_query(self, query: str) -> str:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        query_lower = query.lower()
        
        if any(word in query_lower for word in ['–≥–¥–µ', '–∞–¥—Ä–µ—Å', '–Ω–∞—Ö–æ–¥–∏—Ç—Å—è', '—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω']):
            return 'aidar'  # –ú—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤
        elif any(word in query_lower for word in ['–∫–∞–∫', '—Å–ø–æ—Å–æ–±', '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', '–æ—Ñ–æ—Ä–º–∏—Ç—å']):
            return 'baya'   # –ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        elif any(word in query_lower for word in ['–≤–∞–∂–Ω–æ', '–≤–Ω–∏–º–∞–Ω–∏–µ', '—Å—Ä–æ—á–Ω–æ']):
            return 'xenia'  # –ß–µ—Ç–∫–∏–π –≥–æ–ª–æ—Å –¥–ª—è –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        else:
            return 'kseniya'  # –ú—è–≥–∫–∏–π –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é