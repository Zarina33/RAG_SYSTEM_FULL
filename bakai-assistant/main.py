#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
main.py
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –±–∞–Ω–∫–∞ –ë–∞–∫–∞–π
–í–µ—Ä—Å–∏—è: 2.0
–ê–≤—Ç–æ—Ä: AI Assistant for Bakai Bank

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python main.py                  - –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º
    python main.py --test          - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    python main.py --voice-demo    - –¥–µ–º–æ –≥–æ–ª–æ—Å–æ–≤
    python main.py --info          - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    python main.py --validate      - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
"""

import sys
import os
import argparse
import traceback
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    required_modules = [
        ('torch', 'PyTorch'),
        ('torchaudio', 'TorchAudio'), 
        ('langchain_community', 'LangChain Community'),
        ('chromadb', 'ChromaDB')
    ]
    
    missing = []
    installed = []
    
    for module, name in required_modules:
        try:
            imported_module = __import__(module)
            version = getattr(imported_module, '__version__', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')
            installed.append(f"{name} (v{version})")
            print(f"‚úÖ {name}: {version}")
        except ImportError as e:
            missing.append(name)
            print(f"‚ùå {name}: {e}")
    
    if installed:
        print(f"\nüì¶ –£–°–¢–ê–ù–û–í–õ–ï–ù–û: {len(installed)} –ø–∞–∫–µ—Ç–æ–≤")
        for pkg in installed:
            print(f"   ‚Ä¢ {pkg}")
    
    if missing:
        print(f"\n‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–¢: {len(missing)} –ø–∞–∫–µ—Ç–æ–≤")
        for name in missing:
            print(f"   ‚Ä¢ {name}")
        
        print("\nüí° –†–ï–®–ï–ù–ò–Ø:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Python:")
        print("   which python3")
        print("   python3 --version")
        
        print("\n2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:")
        print("   source new_rag/bin/activate  # –∏–ª–∏ –≤–∞—à–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        
        print("\n3. –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç—ã:")
        print("   pip3 install torch torchaudio langchain-community chromadb")
        
        return False
    
    return True

def run_main_mode():
    """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞...")
    
    try:
        from cli import BakaiCLI
        cli = BakaiCLI()
        cli.run()
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üí° –ó–∞–ø—É—Å—Ç–∏–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é...")
        run_minimal_mode()
    except KeyboardInterrupt:
        print("\nüëã –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if "--debug" in sys.argv:
            traceback.print_exc()
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é: python main.py --minimal")

def run_minimal_mode():
    """–ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üéØ –£–ü–†–û–©–ï–ù–ù–´–ô –†–ï–ñ–ò–ú")
    print("–ë–∞–∑–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –±–µ–∑ TTS –∏ RAG")
    print("=" * 40)
    
    # –ë–∞–∑–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
    responses = {
        "–∫–∞—Ä—Ç": "–ë–∞–Ω–∫ –ë–∞–∫–∞–π –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–∞—Ä—Ç—ã Visa, MasterCard –∏ –≠–ª–ö–∞—Ä—Ç. –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –Ω—É–∂–µ–Ω –ø–∞—Å–ø–æ—Ä—Ç –∏ —Å–ø—Ä–∞–≤–∫–∞ –æ –¥–æ—Ö–æ–¥–∞—Ö.",
        "–æ—Ñ–∏—Å": "–ì–æ–ª–æ–≤–Ω–æ–π –æ—Ñ–∏—Å: –≥. –ë–∏—à–∫–µ–∫, —É–ª. –¢—ã–Ω—ã—Å—Ç–∞–Ω–æ–≤–∞ 101. –†–∞–±–æ—Ç–∞–µ–º –ø–Ω-–ø—Ç 9:00-18:00.",
        "–∫—Ä–µ–¥–∏—Ç": "–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫—Ä–µ–¥–∏—Ç—ã, –∏–ø–æ—Ç–µ–∫—É, –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç—ã. –ù—É–∂–Ω—ã: –ø–∞—Å–ø–æ—Ä—Ç, —Å–ø—Ä–∞–≤–∫–∏ –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ —Ä–∞–±–æ—Ç–µ.",
        "–¥–µ–ø–æ–∑–∏—Ç": "–î–µ–ø–æ–∑–∏—Ç—ã –≤ —Å–æ–º–∞—Ö –∏ –¥–æ–ª–ª–∞—Ä–∞—Ö –æ—Ç 8% –¥–æ 12% –≥–æ–¥–æ–≤—ã—Ö. –ú–∏–Ω–∏–º—É–º 1000 —Å–æ–º.",
        "—Å—á–µ—Ç": "–î–ª—è —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ —Å—á–µ—Ç–∞ –ò–ü –Ω—É–∂–Ω—ã: —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–∞—Å–ø–æ—Ä—Ç, —Å–ø—Ä–∞–≤–∫–∞ –∏–∑ –Ω–∞–ª–æ–≥–æ–≤–æ–π."
    }
    
    print("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:")
    
    while True:
        try:
            query = input("\nüí¨ –í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
            
            if query.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            if not query:
                continue
            
            # –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞
            query_lower = query.lower()
            answer = None
            
            for key, response in responses.items():
                if key in query_lower:
                    answer = f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! {response}\n\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: https://bakai.kg"
                    break
            
            if not answer:
                answer = "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Ñ–∏—Å –ø–æ –∞–¥—Ä–µ—Å—É —É–ª. –¢—ã–Ω—ã—Å—Ç–∞–Ω–æ–≤–∞ 101 –∏–ª–∏ –Ω–∞ —Å–∞–π—Ç bakai.kg"
            
            print(f"\n‚úÖ –û–¢–í–ï–¢:\n{answer}")
            
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break

def run_test_mode():
    """–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 40)
    
    try:
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
        success = check_dependencies()
        
        if not success:
            print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            print("–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
            
            # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã Python
            print("\nüêç –¢–ï–°–¢ PYTHON:")
            print(f"   –í–µ—Ä—Å–∏—è: {sys.version}")
            print(f"   –ü—É—Ç—å: {sys.executable}")
            
            # –¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            print("\nüìÅ –¢–ï–°–¢ –§–ê–ô–õ–û–í–û–ô –°–ò–°–¢–ï–ú–´:")
            test_files = ['config.py', 'tts_system.py', 'content_manager.py']
            for file in test_files:
                if os.path.exists(file):
                    print(f"   ‚úÖ {file}")
                else:
                    print(f"   ‚ùå {file}")
            
            return
        
        print("\n2. –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        try:
            from assistant import BakaiAssistant
            assistant = BakaiAssistant()
            print("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            status = assistant.get_system_status()
            print(f"‚úÖ TTS: {'–≥–æ—Ç–æ–≤' if status['tts_available'] else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
            print(f"‚úÖ RAG: {'–≥–æ—Ç–æ–≤' if status['database_ready'] else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
            
            # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            print("\n3. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞...")
            result = assistant.process_query("–ü—Ä–∏–≤–µ—Ç")
            print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {result['processing_success']}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        if "--debug" in sys.argv:
            traceback.print_exc()

def run_voice_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤"""
    print("üó£Ô∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ì–û–õ–û–°–û–í")
    print("=" * 30)
    
    try:
        from tts_system import BakaiTTS
        
        tts = BakaiTTS()
        
        if not tts.is_initialized:
            print("‚ùå TTS —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            print("‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å PyTorch")
            print("‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ")
            return
        
        voices = tts.get_available_voices()
        print(f"üé≠ –î–æ—Å—Ç—É–ø–Ω–æ –≥–æ–ª–æ—Å–æ–≤: {len(voices)}")
        
        demo_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞–Ω–∫ –ë–∞–∫–∞–π!"
        
        for voice in voices:
            print(f"\nüîä –¢–µ—Å—Ç –≥–æ–ª–æ—Å–∞: {voice}")
            result = tts.speak(demo_text, voice=voice)
            
            if result:
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {result}")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ...")
        
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except ImportError:
        print("‚ùå –ú–æ–¥—É–ª—å TTS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install torch torchaudio")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def show_system_info():
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
    print("üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï")
    print("=" * 40)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Python
    print(f"üêç PYTHON:")
    print(f"   –í–µ—Ä—Å–∏—è: {sys.version}")
    print(f"   –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª: {sys.executable}")
    print(f"   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {sys.platform}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    print(f"\nüîß –û–ö–†–£–ñ–ï–ù–ò–ï:")
    venv = os.environ.get('VIRTUAL_ENV')
    if venv:
        print(f"   –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {venv}")
    else:
        print("   –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    print(f"\nüìÅ –§–ê–ô–õ–´ –ü–†–û–ï–ö–¢–ê:")
    project_files = [
        'config.py', 'tts_system.py', 'content_manager.py', 
        'rag_system.py', 'link_manager.py', 'assistant.py', 'cli.py'
    ]
    
    for file in project_files:
        if os.path.exists(file):
            size = os.path.getsize(file)
            print(f"   ‚úÖ {file} ({size} –±–∞–π—Ç)")
        else:
            print(f"   ‚ùå {file}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print(f"\nüì¶ –ó–ê–í–ò–°–ò–ú–û–°–¢–ò:")
    check_dependencies()

def run_validation():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    print("üîç –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    try:
        # 1. –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print("1. –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è...")
        show_system_info()
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        print(f"\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        deps_ok = check_dependencies()
        
        if not deps_ok:
            print("\n‚ùå –ü–†–û–ë–õ–ï–ú–´ –° –ó–ê–í–ò–°–ò–ú–û–°–¢–Ø–ú–ò")
            print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º")
            return
        
        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        print(f"\n3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        from assistant import BakaiAssistant
        
        assistant = BakaiAssistant()
        validation = assistant.validate_system()
        
        # 4. –û—Ç—á–µ—Ç –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        print(f"\n4. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
        
        components = [
            ("TTS", validation["tts_system"]["test_passed"]),
            ("RAG", validation["rag_system"]["database_ready"]),
            ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", validation["rag_system"]["documents_count"] > 0),
            ("LLM", validation["rag_system"]["llm_ready"])
        ]
        
        for name, status in components:
            icon = "‚úÖ" if status else "‚ùå"
            print(f"   {icon} {name}")
        
        overall = "‚úÖ –ì–û–¢–û–í" if validation["overall_ready"] else "‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –ù–ê–°–¢–†–û–ô–ö–ò"
        print(f"\nüéØ –û–ë–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï: {overall}")
        
        if not validation["overall_ready"]:
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            if not validation["tts_system"]["test_passed"]:
                print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ TTS")
            if validation["rag_system"]["documents_count"] == 0:
                print("   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: pip install -r requirements.txt")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        if "--debug" in sys.argv:
            traceback.print_exc()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –±–∞–Ω–∫–∞ –ë–∞–∫–∞–π",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py                  # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º
  python main.py --test          # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã  
  python main.py --voice-demo    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤
  python main.py --info          # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
  python main.py --validate      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  python main.py --minimal       # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
  python main.py --debug --test  # –¢–µ—Å—Ç —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
        """
    )
    
    parser.add_argument('--test', action='store_true', 
                       help='–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--voice-demo', action='store_true',
                       help='–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤ TTS')
    parser.add_argument('--info', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ')
    parser.add_argument('--validate', action='store_true',
                       help='–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã')
    parser.add_argument('--minimal', action='store_true',
                       help='–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π')
    parser.add_argument('--debug', action='store_true',
                       help='–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –æ—Ç–ª–∞–¥–∫—É')
    
    args = parser.parse_args()
    
    try:
        # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        if args.minimal:
            run_minimal_mode()
        elif args.test:
            run_test_mode()
        elif args.voice_demo:
            run_voice_demo()
        elif args.info:
            show_system_info()
        elif args.validate:
            run_validation()
        else:
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º
            run_main_mode()
            
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        if args.debug:
            traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()

def run_main_mode():
    """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞...")
    
    try:
        from cli import BakaiCLI
        cli = BakaiCLI()
        cli.run()
    except KeyboardInterrupt:
        print("\nüëã –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if "--debug" in sys.argv:
            traceback.print_exc()
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

def run_test_mode():
    """–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 40)
    
    try:
        from assistant import BakaiAssistant
        
        print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        assistant = BakaiAssistant()
        
        print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        validation = assistant.validate_system()
        
        # –û—Ç—á–µ—Ç –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
        components = [
            ("TTS —Å–∏—Å—Ç–µ–º–∞", validation["tts_system"]["test_passed"]),
            ("RAG —Å–∏—Å—Ç–µ–º–∞", validation["rag_system"]["database_ready"]),
            ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", validation["rag_system"]["documents_count"] > 0),
            ("LLM –º–æ–¥–µ–ª—å", validation["rag_system"]["llm_ready"])
        ]
        
        for name, status in components:
            icon = "‚úÖ" if status else "‚ùå"
            print(f"   {icon} {name}")
        
        print(f"\nüéØ –û–±—â–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {'‚úÖ –ì–æ—Ç–æ–≤' if validation['overall_ready'] else '‚ùå –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}")
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        if validation['overall_ready']:
            print("\n3. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞...")
            test_queries = [
                "–ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É?",
                "–ì–¥–µ –≤–∞—à –æ—Ñ–∏—Å?",
                "–£—Å–ª–æ–≤–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è"
            ]
            
            for query in test_queries:
                print(f"\n   üîç –¢–µ—Å—Ç: '{query}'")
                try:
                    result = assistant.process_query(query)
                    if result["processing_success"]:
                        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ (–Ω–∞–π–¥–µ–Ω–æ {result['documents_found']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)")
                        if result['service_type']:
                            print(f"   üéØ –£—Å–ª—É–≥–∞: {result['service_type']}")
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                except Exception as e:
                    print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        if "--debug" in sys.argv:
            traceback.print_exc()

def run_voice_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤"""
    print("üó£Ô∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ì–û–õ–û–°–û–í")
    print("=" * 30)
    
    try:
        from tts_system import BakaiTTS
        
        tts = BakaiTTS()
        
        if not tts.is_initialized:
            print("‚ùå TTS —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏")
            print("‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ")
            print("‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å PyTorch")
            return
        
        voices = tts.get_available_voices()
        voice_info = tts.get_voice_info()
        
        print(f"–î–æ—Å—Ç—É–ø–Ω–æ –≥–æ–ª–æ—Å–æ–≤: {len(voices)}")
        
        for voice in voices:
            info = voice_info.get(voice, {})
            print(f"\nüîä –ì–æ–ª–æ—Å: {voice}")
            print(f"   –¢–∏–ø: {info.get('gender', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {info.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}")
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
            demo_text = f"–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç {voice}. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞–Ω–∫ –ë–∞–∫–∞–π!"
            print("   üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...")
            
            result = tts.speak(demo_text, voice=voice)
            if result:
                print(f"   ‚úÖ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {result}")
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
            
            input("   –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–ª–æ—Å–∞...")
        
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        if "--debug" in sys.argv:
            traceback.print_exc()

def show_system_info():
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
    print("üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï")
    print("=" * 40)
    
    try:
        from assistant import BakaiAssistant
        from config import BANK_CONFIG, RAG_CONFIG, TTS_CONFIG
        
        assistant = BakaiAssistant()
        status = assistant.get_system_status()
        help_info = assistant.get_help_info()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–Ω–∫–µ
        print("üè¶ –ë–ê–ù–ö:")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {BANK_CONFIG['name']}")
        print(f"   –°–∞–π—Ç: {BANK_CONFIG['website']}")
        print(f"   –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {BANK_CONFIG['support_phone']}")
        print(f"   –ì–ª–∞–≤–Ω—ã–π –æ—Ñ–∏—Å: {BANK_CONFIG['main_office']}")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        print(f"\n‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
        print(f"   LLM –º–æ–¥–µ–ª—å: {RAG_CONFIG['llm_model']}")
        print(f"   Embedding –º–æ–¥–µ–ª—å: {RAG_CONFIG['embedding_model']}")
        print(f"   TTS –≥–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {TTS_CONFIG['default_voice']}")
        print(f"   –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {RAG_CONFIG['chroma_db_path']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if status['database_ready']:
            db_stats = status['database_stats']
            print(f"\nüìä –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô:")
            print(f"   –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {db_stats.get('total_documents', 0)}")
            print(f"   –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {db_stats.get('avg_document_length', 0):.0f} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        print(f"\nüîß –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
        print(f"   –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ: {'‚úÖ' if status['tts_available'] else '‚ùå'}")
        print(f"   –ì–æ–ª–æ—Å–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(status['available_voices'])}")
        print(f"   –¢–∏–ø–æ–≤ —É—Å–ª—É–≥: {len(help_info['available_services'])}")
        print(f"   –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ‚úÖ")
        print(f"   –£–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: ‚úÖ")
        print(f"   –°–∏—Å—Ç–µ–º–∞ –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏: ‚úÖ")
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —É—Å–ª—É–≥–∏
        print(f"\nüè™ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –£–°–õ–£–ì–ò:")
        for service in help_info['available_services']:
            print(f"   ‚Ä¢ {service}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        if "--debug" in sys.argv:
            traceback.print_exc()

def run_validation():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    print("üîç –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    try:
        from assistant import BakaiAssistant
        
        print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        assistant = BakaiAssistant()
        
        print("2. –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
        validation = assistant.validate_system()
        
        print("\nüìä –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        
        # TTS —Å–∏—Å—Ç–µ–º–∞
        tts = validation["tts_system"]
        print(f"\nüîä TTS –°–ò–°–¢–ï–ú–ê:")
        print(f"   –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {'‚úÖ' if tts['initialized'] else '‚ùå'}")
        print(f"   –ì–æ–ª–æ—Å–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: {tts['voices_available']}")
        print(f"   –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: {'‚úÖ' if tts['test_passed'] else '‚ùå'}")
        
        # RAG —Å–∏—Å—Ç–µ–º–∞
        rag = validation["rag_system"]
        print(f"\nüß† RAG –°–ò–°–¢–ï–ú–ê:")
        print(f"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ' if rag['database_ready'] else '‚ùå'}")
        print(f"   LLM –º–æ–¥–µ–ª—å: {'‚úÖ' if rag['llm_ready'] else '‚ùå'}")
        print(f"   –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {rag['documents_count']}")
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç —Å–∏—Å—Ç–µ–º–∞
        content = validation["content_system"]
        print(f"\nüìù –ö–û–ù–¢–ï–ù–¢ –°–ò–°–¢–ï–ú–ê:")
        print(f"   –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: {content['forbidden_words_count']}")
        print(f"   –¢–∏–ø–æ–≤ —É—Å–ª—É–≥: {content['service_types_count']}")
        print(f"   –í–µ–∂–ª–∏–≤—ã—Ö —Ñ—Ä–∞–∑: {content['polite_phrases_count']}")
        
        # –°–∏—Å—Ç–µ–º–∞ —Å—Å—ã–ª–æ–∫
        links = validation["link_system"]
        print(f"\nüîó –°–ò–°–¢–ï–ú–ê –°–°–´–õ–û–ö:")
        print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {links['categories_count']}")
        
        valid_links = sum(1 for valid in links['links_valid'].values() if valid)
        total_links = len(links['links_valid'])
        print(f"   –í–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {valid_links}/{total_links}")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        print(f"\nüéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê:")
        if validation["overall_ready"]:
            print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            print(f"   ‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: {validation['critical_issues']}")
            print("   –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if not tts['initialized']:
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ TTS –º–æ–¥–µ–ª–∏")
        if rag['documents_count'] == 0:
            print("   ‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
        if rag['documents_count'] < 10:
            print("   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤")
        if not validation["overall_ready"]:
            print("   ‚Ä¢ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        if "--debug" in sys.argv:
            traceback.print_exc()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –±–∞–Ω–∫–∞ –ë–∞–∫–∞–π",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py                  # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º
  python main.py --test          # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã  
  python main.py --voice-demo    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤
  python main.py --info          # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
  python main.py --validate      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  python main.py --debug --test  # –¢–µ—Å—Ç —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
        """
    )
    
    parser.add_argument('--test', action='store_true', 
                       help='–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--voice-demo', action='store_true',
                       help='–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤ TTS')
    parser.add_argument('--info', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ')
    parser.add_argument('--validate', action='store_true',
                       help='–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã')
    parser.add_argument('--debug', action='store_true',
                       help='–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –æ—Ç–ª–∞–¥–∫—É')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        sys.exit(1)
    
    try:
        # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        if args.test:
            run_test_mode()
        elif args.voice_demo:
            run_voice_demo()
        elif args.info:
            show_system_info()
        elif args.validate:
            run_validation()
        else:
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º
            run_main_mode()
            
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        if args.debug:
            traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()