#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –±–∞–Ω–∫–∞ –ë–∞–∫–∞–π
"""

from typing import Dict, List, Optional, Any
from config import BANK_CONFIG, BANK_LINKS
from tts_system import BakaiTTS
from content_manager import BakaiContentManager
from rag_system import BakaiRAG
from link_manager import BakaiLinkManager

class BakaiAssistant:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –±–∞–Ω–∫–∞ –ë–∞–∫–∞–π"""
    
    def __init__(self):
        print("üè¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –±–∞–Ω–∫–∞ –ë–∞–∫–∞–π...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.tts = BakaiTTS()
        self.content_manager = BakaiContentManager()
        self.rag = BakaiRAG()
        self.link_manager = BakaiLinkManager()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.tts_enabled = True
        self.debug_mode = False
        self.session_stats = {
            'queries_processed': 0,
            'services_detected': {},
            'errors_count': 0
        }
        
        print("‚úÖ –ü–æ–º–æ—â–Ω–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    def process_query(self, query: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            print(f"\nü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: '{query}'")
            self.session_stats['queries_processed'] += 1
            
            # 1. –û–∑–≤—É—á–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
            if self.tts_enabled and self.tts.is_initialized:
                voice = self.tts.select_voice_for_query(query)
                self.tts.speak(f"–í–∞—à –≤–æ–ø—Ä–æ—Å: {query}", voice="kseniya")
            
            # 2. –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            print("üîç –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
            documents = self.rag.search_documents(query)
            
            # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            if not documents:
                answer = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É."
                link = BANK_LINKS["support"]
                service_type = None
            else:
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
                print("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞...")
                raw_answer = self.rag.generate_answer(query, documents)
                
                # –£–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
                print("‚ú® –£–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...")
                enhanced_answer = self.content_manager.enhance_response(raw_answer, query)
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏
                service_type = self.content_manager.detect_service_type(query)
                if service_type:
                    self.session_stats['services_detected'][service_type] = \
                        self.session_stats['services_detected'].get(service_type, 0) + 1
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π —Å—Å—ã–ª–∫–∏
                link = self.link_manager.get_relevant_link(query, documents)
                
                answer = enhanced_answer
            
            # 4. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Å—Å—ã–ª–∫–æ–π
            full_answer = f"{answer}\n\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {link}"
            
            # 5. –û–∑–≤—É—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            if self.tts_enabled and self.tts.is_initialized:
                voice = self.tts.select_voice_for_query(query)
                print(f"üîä –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≥–æ–ª–æ—Å–æ–º {voice}...")
                self.tts.speak(answer, voice=voice)
            
            # 6. –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                "answer": full_answer,
                "raw_answer": answer,
                "documents": documents,
                "link": link,
                "service_type": service_type,
                "voice_used": voice if self.tts_enabled else None,
                "documents_found": len(documents),
                "processing_success": True
            }
            
            print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return result
            
        except Exception as e:
            self.session_stats['errors_count'] += 1
            error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            print(f"‚ùå {error_msg}")
            
            # –û–∑–≤—É—á–∏–≤–∞–µ–º –æ—à–∏–±–∫—É
            if self.tts_enabled and self.tts.is_initialized:
                self.tts.speak("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.")
            
            return {
                "answer": f"{error_msg}\n\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {BANK_LINKS['support']}",
                "raw_answer": error_msg,
                "documents": [],
                "link": BANK_LINKS["support"],
                "service_type": None,
                "voice_used": None,
                "documents_found": 0,
                "processing_success": False,
                "error": str(e)
            }
    
    def set_tts_enabled(self, enabled: bool) -> None:
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è"""
        self.tts_enabled = enabled
        status = "–≤–∫–ª—é—á–µ–Ω–æ" if enabled else "–æ—Ç–∫–ª—é—á–µ–Ω–æ"
        print(f"üîä –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ {status}")
        
        if enabled and self.tts.is_initialized:
            self.tts.speak(f"–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ {status}")
    
    def set_debug_mode(self, enabled: bool) -> None:
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏"""
        self.debug_mode = enabled
        status = "–≤–∫–ª—é—á–µ–Ω" if enabled else "–≤—ã–∫–ª—é—á–µ–Ω"
        print(f"üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ {status}")
    
    def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        return {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            "tts_available": self.tts.is_initialized,
            "tts_enabled": self.tts_enabled,
            "database_ready": self.rag.vectorstore is not None,
            "llm_ready": self.rag.llm is not None,
            
            # TTS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            "available_voices": self.tts.get_available_voices(),
            "voice_info": self.tts.get_voice_info(),
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            "database_stats": self.rag.get_database_stats(),
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            "content_filters_enabled": True,
            "politeness_enabled": True,
            "service_offers_enabled": True,
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏
            "session_stats": self.session_stats.copy(),
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–Ω–∫–µ
            "bank_info": BANK_CONFIG,
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            "debug_mode": self.debug_mode
        }
    
    def get_service_categories(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö —É—Å–ª—É–≥"""
        categories = self.link_manager.get_all_categories()
        result = {}
        
        for category in categories:
            result[category] = {
                "info": self.link_manager.get_category_info(category),
                "link": BANK_LINKS.get(category, BANK_LINKS["general"]),
                "service_patterns_count": len(self.content_manager.service_patterns.get(category, [])),
                "offers_available": len(self.content_manager.service_offers.get(category, []))
            }
        
        return result
    
    def analyze_query(self, query: str) -> Dict[str, Any]:
        """–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        analysis = {
            "query": query,
            "query_length": len(query),
            "detected_service": self.content_manager.detect_service_type(query),
            "link_categories": self.link_manager.analyze_query_categories(query),
            "suggested_voice": self.tts.select_voice_for_query(query) if self.tts.is_initialized else None
        }
        
        # –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        documents = self.rag.search_documents(query, k=3)
        analysis["documents_preview"] = [
            {
                "content_preview": doc.page_content[:100] + "...",
                "metadata": doc.metadata if hasattr(doc, 'metadata') else {}
            }
            for doc in documents[:3]
        ]
        
        return analysis
    
    def reset_session_stats(self) -> None:
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏"""
        self.session_stats = {
            'queries_processed': 0,
            'services_detected': {},
            'errors_count': 0
        }
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏ —Å–±—Ä–æ—à–µ–Ω–∞")
    
    def validate_system(self) -> Dict[str, Any]:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        validation = {
            "tts_system": {
                "initialized": self.tts.is_initialized,
                "voices_available": len(self.tts.get_available_voices()),
                "test_passed": False
            },
            "rag_system": {
                "database_ready": self.rag.vectorstore is not None,
                "llm_ready": self.rag.llm is not None,
                "documents_count": self.rag.document_count
            },
            "content_system": {
                "forbidden_words_count": len(self.content_manager.forbidden_words),
                "service_types_count": len(self.content_manager.service_patterns),
                "polite_phrases_count": sum(len(phrases) for phrases in self.content_manager.polite_phrases.values())
            },
            "link_system": {
                "categories_count": len(self.link_manager.get_all_categories()),
                "links_valid": self.link_manager.validate_links()
            }
        }
        
        # –¢–µ—Å—Ç TTS
        if self.tts.is_initialized:
            try:
                test_result = self.tts.test_voice("baya", "–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã")
                validation["tts_system"]["test_passed"] = test_result is not None
            except:
                validation["tts_system"]["test_passed"] = False
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        critical_components = [
            validation["rag_system"]["database_ready"],
            validation["rag_system"]["llm_ready"],
            validation["rag_system"]["documents_count"] > 0
        ]
        
        validation["overall_ready"] = all(critical_components)
        validation["critical_issues"] = len([c for c in critical_components if not c])
        
        return validation
    
    def get_help_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        return {
            "bank_info": BANK_CONFIG,
            "available_services": list(self.content_manager.service_patterns.keys()),
            "voice_commands": [
                "—Ç–∏—Ö–æ / –≥—Ä–æ–º–∫–æ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ–º",
                "—Å—Ç–∞—Ç—É—Å - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
                "–ø–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞",
                "–≤—ã—Ö–æ–¥ - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"
            ],
            "supported_queries": [
                "–í–æ–ø—Ä–æ—Å—ã –æ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —É—Å–ª—É–≥–∞—Ö",
                "–ê–¥—Ä–µ—Å–∞ –æ—Ñ–∏—Å–æ–≤ –∏ —Ñ–∏–ª–∏–∞–ª–æ–≤",
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–∞—Ö –∏ –∫—Ä–µ–¥–∏—Ç–∞—Ö",
                "–£—Å–ª–æ–≤–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏ –≤–∫–ª–∞–¥–æ–≤",
                "–ë–∏–∑–Ω–µ—Å-—É—Å–ª—É–≥–∏ –∏ —Ä–∞—Å—á–µ—Ç–Ω—ã–µ —Å—á–µ—Ç–∞"
            ],
            "contact_info": {
                "phone": BANK_CONFIG["support_phone"],
                "website": BANK_CONFIG["website"],
                "main_office": BANK_CONFIG["main_office"]
            }
        }